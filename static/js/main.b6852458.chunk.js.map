{"version":3,"sources":["Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","handleFileUpload","info","a","Selsman","Invocies","Total","file","status","message","setState","ModalVisible","readXlsxFile","then","rows","length","forEach","row","push","milliseconds","TitleStatus","Promise","resolve","setTimeout","addProgress","Set","seller","vendeur","NombreFacture","NombreFactureUnique","NombreCreditNote","NombreRetour","SkuParFacture","i","tempInvoices","tempCreditNotes","invoice","FinalVendeur","Vendeur","Status","Vendeurs","title","success","state","percent","k","l","tempPercent","this","Content","Layout","Header","Footer","Sider","Dragger","Upload","Helmet","charSet","rel","href","name","onChange","e","beforeUpload","className","type","columns","dataIndex","key","dataSource","visible","cancelButtonProps","disabled","okButtonProps","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b6852458.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Upload, message, Icon, Table, Result, Modal, Layout } from \"antd\";\r\nimport readXlsxFile from \"read-excel-file\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport \"antd/dist/antd.css\";\r\nexport default class Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      file: null,\r\n      Vendeurs: [],\r\n      Status: \"info\",\r\n      TitleStatus: \"Veuillez patienter \",\r\n      percent: 0,\r\n      title: \"Sku/Facutre\"\r\n    };\r\n  }\r\n\r\n  addProgress(k, l) {\r\n    let tempPercent = (k / l) * 100;\r\n    this.setState({\r\n      percent: tempPercent,\r\n      TitleStatus: \"Fichier est encour de traitement\",\r\n      ModalVisible: false\r\n    });\r\n  }\r\n\r\n  handleFileUpload = async info => {\r\n    let Selsman = [];\r\n    let Products = [];\r\n    let Invocies = [];\r\n    let TotalInvocies = [];\r\n    let TotalCreditNote = [];\r\n    let CreditNote = [];\r\n    let Total = [];\r\n    const { status } = info.file;\r\n    if (status !== \"uploading\") {\r\n      message.info(`Debut de la lecture`);\r\n      this.setState({ ModalVisible: true });\r\n      readXlsxFile(info.file).then(rows => {\r\n        let k = 1;\r\n        let TotalPercent = rows.length;\r\n        rows.forEach(row => {\r\n          if (row[10] != null && row[10] != \"* Salesman\") {\r\n            Selsman.push(row[10]);\r\n          }\r\n          k++;\r\n        });\r\n        const sleep = milliseconds => {\r\n          return new Promise(resolve => setTimeout(resolve, milliseconds));\r\n        };\r\n\r\n        this.setState({ TitleStatus: \"Lecture terminer\" });\r\n        sleep(500);\r\n        this.addProgress(0, 1);\r\n        Selsman = [...new Set(Selsman)];\r\n        rows.forEach(row => {\r\n          if (row[5] !== null && row[5] !== \"Transaction Type\") {\r\n            Invocies.push(row[5]);\r\n          }\r\n        });\r\n        Invocies = [...new Set(Invocies)];\r\n        //console.log(Products);\r\n        message.info(`Recherche Des vendeurs`);\r\n        Selsman.forEach(seller => {\r\n          Total.push({\r\n            vendeur: seller,\r\n            NombreFacture: 0,\r\n            NombreFactureUnique: 0,\r\n            NombreCreditNote: 0,\r\n            NombreRetour: 0,\r\n            SkuParFacture: 0.0\r\n          });\r\n        });\r\n        let i = 0;\r\n        message.info(`Calcules des SKU/Facture`);\r\n\r\n        Selsman.forEach(seller => {\r\n          this.addProgress(i, seller.length);\r\n          let tempInvoices = [];\r\n          let tempCreditNotes = [];\r\n          Invocies.forEach(invoice => {\r\n            rows.forEach(row => {\r\n              //console.log(row);\r\n              if (seller == row[10]) {\r\n                if (invoice == row[5]) {\r\n                  if (row[4] === \"Invoice\") {\r\n                    Total[i].NombreFacture += 1;\r\n                    tempInvoices.push(row[5]);\r\n                  } else {\r\n                    Total[i].NombreRetour += 1;\r\n                    tempCreditNotes.push(row[5]);\r\n                  }\r\n                }\r\n              }\r\n            });\r\n\r\n            tempInvoices = [...new Set(tempInvoices)];\r\n            tempCreditNotes = [...new Set(tempCreditNotes)];\r\n\r\n            Total[i].NombreFactureUnique = tempInvoices.length;\r\n            Total[i].NombreCreditNote = tempCreditNotes.length;\r\n          });\r\n          i++;\r\n        });\r\n        let FinalVendeur = [];\r\n\r\n        Total.forEach(vendeur => {\r\n          vendeur.SkuParFacture =\r\n            (vendeur.NombreFacture - vendeur.NombreRetour) /\r\n            (vendeur.NombreFactureUnique - vendeur.NombreCreditNote);\r\n          FinalVendeur.push({\r\n            Vendeur: vendeur.vendeur,\r\n            SkuParFacture: vendeur.SkuParFacture\r\n          });\r\n        });\r\n        this.setState({\r\n          Status: \"success\",\r\n          TitleStatus: \"Terminer ! \",\r\n          Vendeurs: FinalVendeur,\r\n          title: \"Termin√©\"\r\n        });\r\n        message.success(`Terminer`);\r\n        this.setState({ ModalVisible: false });\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { Header, Footer, Sider, Content } = Layout;\r\n    const columns = [\r\n      {\r\n        title: \"Vendeur\",\r\n        dataIndex: \"Vendeur\",\r\n        key: \"Vendeur\"\r\n      },\r\n\r\n      {\r\n        title: \"SKU/Facture\",\r\n        dataIndex: \"SkuParFacture\",\r\n        key: \"SkuParFacture\"\r\n      }\r\n    ];\r\n    const { Dragger } = Upload;\r\n    return (\r\n      <>\r\n        <Helmet>\r\n          <meta charSet=\"utf-8\" />\r\n          <title>{this.state.title}</title>\r\n          <link rel=\"canonical\" href=\"http://mysite.com/example\" />\r\n        </Helmet>\r\n        <Layout>\r\n          <Content>\r\n            <Dragger\r\n              name=\"file\"\r\n              onChange={e => {\r\n                this.handleFileUpload(e);\r\n              }}\r\n              beforeUpload={() => {\r\n                return false;\r\n              }}\r\n            >\r\n              <p className=\"ant-upload-drag-icon\">\r\n                <Icon type=\"inbox\" />\r\n              </p>\r\n              <p className=\"ant-upload-text\">\r\n                Appuier ici ou deplacer le fichier ici\r\n              </p>\r\n              <p className=\"ant-upload-hint\"></p>\r\n            </Dragger>\r\n\r\n            <Table columns={columns} dataSource={this.state.Vendeurs}></Table>\r\n          </Content>\r\n        </Layout>\r\n        <Modal\r\n          title=\"En cours de traitement\"\r\n          visible={this.state.ModalVisible}\r\n          cancelButtonProps={{ disabled: true }}\r\n          okButtonProps={{ disabled: true }}\r\n        >\r\n          <Result\r\n            status={this.state.Status}\r\n            title={this.state.TitleStatus}\r\n          ></Result>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport \"./App.css\";\nimport Main from \"./Components/Main\";\nfunction App() {\n  return <Main></Main>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}